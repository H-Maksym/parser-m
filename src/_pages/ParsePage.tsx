'use client';

import { Loader } from '@/_components/Loader';
import { FC, useState } from 'react';

interface IParsePage {
  className?: string;
}

export const ParsePage: FC<IParsePage> = ({ className }) => {
  const [inputUrl, setInputUrl] = useState('');
  const [result, setResult] = useState<any>(null); // eslint-disable-line @typescript-eslint/no-explicit-any
  const [loading, setLoading] = useState(false);
  const [copied, setCopied] = useState(false);

  // üîç –ü–∞—Ä—Å–∏–Ω–≥ —ñ –≤–∏–≤—ñ–¥ JSON —É —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å
  const handleParse = async () => {
    if (!inputUrl) return;

    setLoading(true);
    setResult(null);
    setCopied(false);

    try {
      const res = await fetch('/api/parse-megogo', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ url: inputUrl }),
      });

      if (!res.ok) {
        const errorData = await res.json();
        setResult({ error: errorData.error || '–°–µ—Ä–≤–µ—Ä –ø–æ–≤–µ—Ä–Ω—É–≤ –ø–æ–º–∏–ª–∫—É' });
        return;
      }

      const data = await res.json();
      setResult(data);
    } catch (err) {
      setResult({ error: 'Failed to fetch', err });
    } finally {
      setLoading(false);
    }
  };

  // üíæ –°–∫–∞—á—É–≤–∞–Ω–Ω—è CSV
  const handleDownloadCSV = async () => {
    if (!inputUrl) return;

    setLoading(true);

    try {
      const res = await fetch('/api/parse-megogo?format=csv', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ url: inputUrl }),
      });

      if (!res.ok) {
        const errorData = await res.json();
        setResult({ error: errorData.error || '–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ CSV' });
        return;
      }

      const csvText = await res.text();
      const blob = new Blob([csvText], { type: 'text/csv;charset=utf-8' });
      const url = window.URL.createObjectURL(blob);
      const link = document.createElement('a');
      link.href = url;
      link.download = 'episodes.csv';
      document.body.appendChild(link);
      link.click();
      link.remove();
      window.URL.revokeObjectURL(url);

      // setResult({ success: 'CSV —Ñ–∞–π–ª —É—Å–ø—ñ—à–Ω–æ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ' });
    } catch (err) {
      setResult({ error: '–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Å–∫–∞—á—É–≤–∞–Ω–Ω—ñ CSV', err });
    } finally {
      setLoading(false);
    }
  };

  // üìã –ö–æ–ø—ñ—é–≤–∞–Ω–Ω—è JSON —É –±—É—Ñ–µ—Ä
  const handleCopy = () => {
    if (!result) return;

    const textToCopy = JSON.stringify(result, null, 2);
    navigator.clipboard.writeText(textToCopy).then(() => {
      setCopied(true);
      setTimeout(() => setCopied(false), 2000);
    });
  };

  return (
    <div className={className}>
      <h1 className="text-2xl font-bold mb-4">MEGOGO Parser</h1>

      <input
        type="text"
        className="border p-2 w-full max-w-xl mb-4"
        placeholder="–í—Å—Ç–∞–≤ URL —Å–µ—Ä—ñ—ó –∑ megogo.net"
        value={inputUrl}
        onChange={e => setInputUrl(e.target.value)}
      />

      <button
        onClick={handleParse}
        disabled={loading}
        className="bg-blue-600 text-white px-4 py-2 rounded disabled:opacity-50"
      >
        {loading ? '–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è...' : '–ü–∞—Ä—Å–∏—Ç–∏'}
      </button>

      {loading && <Loader />}

      {result && (
        <>
          <div className="flex items-center mt-6 space-x-4">
            <button
              onClick={handleCopy}
              className="bg-green-600 text-white px-4 py-2 rounded hover:bg-green-700 transition"
            >
              {copied ? '–°–∫–æ–ø—ñ–π–æ–≤–∞–Ω–æ!' : '–°–∫–æ–ø—ñ—é–≤–∞—Ç–∏'}
            </button>

            <button
              onClick={handleDownloadCSV}
              disabled={loading}
              className="bg-purple-600 text-white px-4 py-2 rounded hover:bg-purple-700 transition disabled:opacity-50"
            >
              –ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ CSV
            </button>
          </div>

          <pre className="mt-4 bg-gray-100 p-4 rounded overflow-x-auto text-sm">
            {JSON.stringify(result, null, 2)}
          </pre>
        </>
      )}
    </div>
  );
};
